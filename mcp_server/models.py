# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:25:48+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Source(BaseModel):
    example: Optional[str] = Field(
        None, description='A sample input to guide the user when resolving this issue'
    )
    parameter: Optional[str] = Field(
        None,
        description='The key of the URI path or query parameter that caused the error',
    )
    pointer: Optional[str] = Field(
        None,
        description='A JSON Pointer [RFC6901] to the associated entity in the request body that caused this error',
    )


class Error(BaseModel):
    code: Optional[int] = Field(
        None,
        description='A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error',
    )
    detail: Optional[str] = Field(
        None,
        description='An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.',
    )
    source: Optional[Source] = Field(None, title='Error_Source')
    status: Optional[int] = Field(
        None,
        description='The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.',
    )
    title: Optional[str] = Field(
        None,
        description='An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized',
    )


class Error400(BaseModel):
    errors: Optional[List[Error]] = None


class Error1(BaseModel):
    code: Optional[int] = Field(
        None,
        description='A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error',
    )
    detail: Optional[str] = Field(
        None,
        description='An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.',
    )
    source: Optional[Source] = Field(None, title='Error_Source')
    status: Optional[int] = Field(
        None,
        description='The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.',
    )
    title: Optional[str] = Field(
        None,
        description='An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized',
    )


class Error500(BaseModel):
    errors: Optional[List[Error1]] = None


class Source2(BaseModel):
    example: Optional[str] = Field(
        None, description='A sample input to guide the user when resolving this issu'
    )
    parameter: Optional[str] = Field(
        None,
        description='The key of the URI path or query parameter that caused the error',
    )
    pointer: Optional[str] = Field(
        None,
        description='A JSON Pointer [RFC6901] to the associated entity in the request body that caused this error',
    )


class Warning(BaseModel):
    code: int = Field(
        ...,
        description='A machine-readable error code from the Canned Messages table, that will enable the API Consumers code to handle this type of error',
    )
    detail: Optional[str] = Field(
        None,
        description='An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.',
    )
    source: Optional[Source2] = Field(
        None, description='The Warning Source Definition', title='Warning_Source'
    )
    title: str = Field(
        ...,
        description='An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized',
    )


class Destination(BaseModel):
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )


class Origin(BaseModel):
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )


class QuartileRanking(Enum):
    MINIMUM = 'MINIMUM'
    FIRST = 'FIRST'
    MEDIUM = 'MEDIUM'
    THIRD = 'THIRD'
    MAXIMUM = 'MAXIMUM'


class PriceMetric(BaseModel):
    amount: Optional[str] = Field(
        None,
        description='Defines the monetary value with decimal position. It can be in cash or miles.',
    )
    quartileRanking: Optional[QuartileRanking] = None


class TransportType(Enum):
    FLIGHT = 'FLIGHT'


class ItineraryPriceMetric(BaseModel):
    currencyCode: Optional[str] = Field(
        None,
        description='currency of the prices.\n\nCurrency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro',
    )
    departureDate: Optional[str] = Field(
        None,
        description='The date on which the traveler will depart from the origin to go to the destination. \n\nDates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.',
    )
    destination: Optional[Destination] = Field(
        None,
        description='Description of a particular point or place in physical space',
        title='Location',
    )
    oneWay: Optional[bool] = Field(
        None, description='true for a one way trip,\nfalse for a round trip'
    )
    origin: Optional[Origin] = Field(
        None,
        description='Description of a particular point or place in physical space',
        title='Location',
    )
    priceMetrics: Optional[List[PriceMetric]] = None
    transportType: Optional[TransportType] = Field(
        None, description='transportation type'
    )
    type: Optional[str] = Field(
        None, description='ressource type - always price-metrics'
    )


class Method(Enum):
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'
    DELETE = 'DELETE'
    OPTIONS = 'OPTIONS'


class Meta(BaseModel):
    href: Optional[str] = Field(None, description='URL value')
    methods: Optional[List[Method]] = Field(
        None, description='HTTP methods supported by the sibling URI'
    )


class AnalyticsItineraryPriceMetricsGetResponse(BaseModel):
    data: Optional[List[ItineraryPriceMetric]] = None
    meta: Optional[Meta] = Field(
        None, description='Links related to the returned objects(s)', title='Links'
    )
    warnings: Optional[List[Warning]] = None
